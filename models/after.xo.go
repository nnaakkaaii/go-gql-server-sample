package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// After represents a row from 'public.after'.
type After struct {
	LineCd              int    `json:"line_cd"`               // line_cd
	LineName            string `json:"line_name"`             // line_name
	StationCd           int    `json:"station_cd"`            // station_cd
	StationName         string `json:"station_name"`          // station_name
	Address             string `json:"address"`               // address
	AfterStationCd      int    `json:"after_station_cd"`      // after_station_cd
	AfterStationName    string `json:"after_station_name"`    // after_station_name
	AfterStationGCd     int    `json:"after_station_g_cd"`    // after_station_g_cd
	AfterStationAddress string `json:"after_station_address"` // after_station_address
}

// AftersByStationCD runs a custom query, returning results as After.
func AftersByStationCD(ctx context.Context, db DB, stationCD int) ([]*After, error) {
	// query
	const sqlstr = `select sl.line_cd, ` +
		`sl.line_name, ` +
		`s.station_cd, ` +
		`s.station_name, ` +
		`s.address, ` +
		`COALESCE(js.station_cd, 0)    as after_station_cd, ` +
		`COALESCE(js.station_name, '') as after_station_name, ` +
		`COALESCE(js.station_g_cd, 0)  as after_station_g_cd, ` +
		`COALESCE(js.address, '')      as after_station_address ` +
		`from station s ` +
		`left outer join line sl on s.line_cd = sl.line_cd ` +
		`left outer join station_join j on s.line_cd = j.line_cd and s.station_cd = j.station_cd2 ` +
		`left outer join station js on j.station_cd1 = js.station_cd ` +
		`where s.e_status = 0 ` +
		`and s.station_cd = $1`
	// run
	logf(sqlstr, stationCD)
	rows, err := db.QueryContext(ctx, sqlstr, stationCD)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*After
	for rows.Next() {
		var a After
		// scan
		if err := rows.Scan(&a.LineCd, &a.LineName, &a.StationCd, &a.StationName, &a.Address, &a.AfterStationCd, &a.AfterStationName, &a.AfterStationGCd, &a.AfterStationAddress); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &a)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
